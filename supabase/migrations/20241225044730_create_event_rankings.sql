create table "public"."event_rankings" (
    "id" bigint generated by default as identity not null,
    "event_id" uuid not null,
    "rank" bigint not null,
    "team_number" bigint not null,
    "sort_orders" double precision[],
    "wins" bigint,
    "ties" bigint,
    "losses" bigint,
    "qual_average" double precision,
    "disqualifications" bigint,
    "matches_played" bigint
);

alter table "public"."event_rankings" enable row level security;

CREATE UNIQUE INDEX event_rankings_pkey ON public.event_rankings USING btree (id);

alter table "public"."event_rankings" add constraint "event_rankings_pkey" PRIMARY KEY using index "event_rankings_pkey";

alter table "public"."event_rankings" add constraint "public_event_rankings_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."event_rankings" validate constraint "public_event_rankings_event_id_fkey";

create policy "SELECT event_rankings global"
on "public"."event_rankings"
as permissive
for select
to authenticated
using (
    ((auth.jwt() -> 'app_metadata'::text) -> 'globalPermissions'::text) @> '"Events_View"'::jsonb
);

create policy "SELECT event_rankings event_staff"
on "public"."event_rankings"
as permissive
for select
to authenticated
using (event_id IN (
    SELECT event_staffs.event_id
    FROM event_staffs
    WHERE (
        event_staffs.user_id = (SELECT auth.uid() AS uid) AND
        ('Event_View'::text = ANY (event_staffs.permissions))
    )
));

create policy "SELECT event_rankings av_token"
on "public"."event_rankings"
as permissive
for select
to public
using (
    event_id = (auth.jwt() ->> 'eventId'::text)::uuid
);

grant delete on table "public"."event_rankings" to "anon";

grant insert on table "public"."event_rankings" to "anon";

grant references on table "public"."event_rankings" to "anon";

grant select on table "public"."event_rankings" to "anon";

grant trigger on table "public"."event_rankings" to "anon";

grant truncate on table "public"."event_rankings" to "anon";

grant update on table "public"."event_rankings" to "anon";

grant delete on table "public"."event_rankings" to "authenticated";

grant insert on table "public"."event_rankings" to "authenticated";

grant references on table "public"."event_rankings" to "authenticated";

grant select on table "public"."event_rankings" to "authenticated";

grant trigger on table "public"."event_rankings" to "authenticated";

grant truncate on table "public"."event_rankings" to "authenticated";

grant update on table "public"."event_rankings" to "authenticated";

grant delete on table "public"."event_rankings" to "service_role";

grant insert on table "public"."event_rankings" to "service_role";

grant references on table "public"."event_rankings" to "service_role";

grant select on table "public"."event_rankings" to "service_role";

grant trigger on table "public"."event_rankings" to "service_role";

grant truncate on table "public"."event_rankings" to "service_role";

grant update on table "public"."event_rankings" to "service_role";